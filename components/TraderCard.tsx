'use client';

import { useRef } from 'react';
import { Card, CardContent } from './ui/Card';
import { Badge } from './ui/badge';
import { Button } from './ui/Button';

interface TraderCardProps {
  address: string;
  personality: string;
  riskScore: number;
  portfolioValue: number;
  badges?: Array<{ name: string; icon?: string }>;
  tagline?: string;
  stats?: {
    totalTransactions: number;
    portfolioAgeMonths: number;
  };
}

export default function TraderCard({
  address,
  personality,
  riskScore,
  portfolioValue,
  badges = [],
  tagline = 'On-chain trader',
  stats,
}: TraderCardProps) {
  const cardRef = useRef<HTMLDivElement>(null);

  const shortenAddress = (addr: string) => {
    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;
  };

  const getRiskLabel = (score: number) => {
    if (score <= 3) return { label: 'Conservative', color: 'text-green-500' };
    if (score <= 5) return { label: 'Balanced', color: 'text-blue-500' };
    if (score <= 7) return { label: 'Aggressive', color: 'text-orange-500' };
    return { label: 'Degen', color: 'text-red-500' };
  };

  const risk = getRiskLabel(riskScore);

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `${personality} Trader Card`,
          text: `Check out my crypto trader profile! ${tagline}`,
          url: window.location.href,
        });
      } catch (err) {
        console.log('Share cancelled');
      }
    } else {
      await navigator.clipboard.writeText(window.location.href);
      alert('Profile link copied to clipboard!');
    }
  };

  const handleDownload = async () => {
    const { default: html2canvas } = await import('html2canvas');
    
    if (cardRef.current) {
      const canvas = await html2canvas(cardRef.current, {
        backgroundColor: '#171717',
        scale: 2,
      });
      
      const link = document.createElement('a');
      link.download = `trader-card-${address.slice(0, 8)}.png`;
      link.href = canvas.toDataURL();
      link.click();
    }
  };

  return (
    <div className="space-y-4">
      <Card ref={cardRef} className="border-border bg-card">
        <CardContent className="pt-6 space-y-6">
          {/* Header */}
          <div className="flex items-start justify-between">
            <div>
              <p className="text-sm text-muted-foreground mb-1">Trader Profile</p>
              <h2 className="text-2xl font-bold text-foreground mb-1">{personality}</h2>
              <p className="text-muted-foreground font-mono text-sm">{shortenAddress(address)}</p>
            </div>
            <div className="text-right">
              <Badge className={`${risk.color} border border-current bg-transparent`}>
                {risk.label}
              </Badge>
              <p className="text-xs text-muted-foreground mt-2">Risk: {riskScore}/10</p>
            </div>
          </div>

          {/* Tagline */}
          {tagline && (
            <div className="py-3 px-4 bg-muted rounded-lg border border-border">
              <p className="text-foreground text-center italic">&quot;{tagline}&quot;</p>
            </div>
          )}

          {/* Stats */}
          <div className="grid grid-cols-3 gap-4">
            <div className="bg-card rounded-lg p-4 border border-border">
              <p className="text-sm text-muted-foreground mb-1">Portfolio</p>
              <p className="text-xl font-bold text-foreground">
                ${portfolioValue >= 1000 ? `${(portfolioValue / 1000).toFixed(1)}k` : portfolioValue.toFixed(0)}
              </p>
            </div>
            <div className="bg-card rounded-lg p-4 border border-border">
              <p className="text-sm text-muted-foreground mb-1">Transactions</p>
              <p className="text-xl font-bold text-foreground">{stats?.totalTransactions || 0}</p>
            </div>
            <div className="bg-card rounded-lg p-4 border border-border">
              <p className="text-sm text-muted-foreground mb-1">Active</p>
              <p className="text-xl font-bold text-foreground">
                {stats?.portfolioAgeMonths || 0}m
              </p>
            </div>
          </div>

          {/* Badges */}
          {badges.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {badges.slice(0, 4).map((badge, idx) => (
                <Badge key={idx} variant="secondary" className="border border-border">
                  {badge.name.replace(/^[\p{Emoji}\s]+/u, '')}
                </Badge>
              ))}
            </div>
          )}

          {/* Footer */}
          <div className="pt-4 border-t border-border">
            <p className="text-xs text-muted-foreground text-center">
              Generated by Prism Analytics â€¢ {new Date().toLocaleDateString()}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Share buttons */}
      <div className="flex gap-3">
        <Button
          onClick={handleDownload}
          className="flex-1 bg-primary hover:bg-primary/90 text-primary-foreground"
        >
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
          </svg>
          Download Card
        </Button>
        <Button
          onClick={handleShare}
          variant="outline"
          className="flex-1 border-border hover:bg-muted"
        >
          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
          </svg>
          Share Profile
        </Button>
      </div>
    </div>
  );
}
